# s-box 대치, p-box순열

# 48bit 문자열을 문자열 변수 2개를 이용하여 6개씩 빼서 6 과 n-6짜리로 나눈다.
# 6으로 나눈 것을 거꾸로 읽어 자리수 마다 2의 n-1승을 더하여 s-box의 표에다가 넣는다.

class S_Box:
    def sBoxGraph():
        sbox=[ 
        #S-box1
        [[14,  4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7],
        [0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8],
        [4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0],
        [15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13]],

        #S-box2
        [[15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10],
        [3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5],
        [0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15],
        [13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14,  9]],

        #S-box3
        [[10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8],
        [13,  7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1],
        [13,  6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7],
        [1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12]],

        #S-box4
        [[7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11, 12,  4, 15],
        [13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,  9],
        [10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4],
        [3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14]],

        #S-box5
        [[2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9],
        [14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6],
        [4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14],
        [11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3]],

        #S-box6
        [[12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11],
        [10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8],
        [9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6],
        [4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13]],

        #S-box7
        [[4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1],
        [13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6],
        [1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2],
        [6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12]],

        #S-box8
        [[13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7],
        [1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2],
        [7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8],
        [2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11]]
        ]
        return sbox

    def sBoxRepalce(self,xorResult): #sbox 대치를 이용하여 평문48bit과 키48bit xor결과를 32bit으로
        sbox=self.sBoxGraph() #S-box 대치 표를 불러옴
        xorResultBit='' #xor연산 결과를 담는 빈 문자열
        empty6Bit='' #6비트 씩 끊을 빈 문자열
        count=int(0) # 인덱스에 넣을 값
        sboxRsult=[] #sbox 대치 결과를 넣은 빈 리스트
        
        for i in range(len(xorResult)): #평문 왼쪽 32bit와 pbox결과와 xor한 결과를 문자열로 저장
            for j in range(len(xorResult[i])):
                xorResultBit+=xorResult[i][j]
        emptyBit=xorResultBit #첫번째 xor 결과 비트열로 저장

        for i in range(len(sbox)): #실제 sbox처리
            empty6Bit=emptyBit[:6] #앞자리 6비트 따로 저장
            emptyBit=emptyBit[6:] #xor결과 6개씩 짤라서 저장
            idx1=0 #sbox를 저장하는 3차원 리스트를 참조할 인덱스값을 저장할 변수
            idx2=0
            for a in empty6Bit[-1:-5:-1]: #6비트씩 자른 결과 뒤에서 4비트 읽기
                if a=='1': #뒤부터 읽은 비트가 1이이면 2의 (자릿수-1)제곱해서 count에 저장
                    idx1+=int(a)*(2**count)
                count+=1
            count=0
            for b in empty6Bit[1::-1]: #6비트씩 자른 결과 뒤에서 2비트 읽기
                if b=='1': #뒤부터 읽은 비트가 1이이면 2의 (자릿수-1)제곱해서 count에 저장
                    idx2+=int(b)*(2**count)
                count+=1
            count=0
            sboxRsult.append('0'*(4-len(bin(sbox[i][idx2][idx1])[2:]))+bin(sbox[i][idx2][idx1])[2:])
            #i번째 sbox의 dix2,dix1에 있는 값을 2진수로 바꾼뒤 앞자리 0으로 채워 4비로 만들어서 리스트에 저장
        return [sboxRsult] #2차원 리스트로 출력
            